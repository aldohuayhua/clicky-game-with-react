{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Nav/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","aria-label","alt","name","src","image","onClick","handleClick","id","Wrapper","children","Nav","href","score","topScore","Header","App","shuffleData","friends","i","length","j","Math","floor","random","temp","guessedCorrectly","newData","state","map","item","newItem","console","log","clickedOn","handleCorrectGuess","handleIncorrectGuess","data","setState","resetGame","newScore","newTopScore","max","bind","this","FriendInfo","friend","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ghGAgBeA,MAbf,SAAoBC,GAEhB,OACQ,yBACIC,UAAU,aACVC,aAAW,aACXC,IAAKH,EAAMI,KACXC,IAAKL,EAAMM,MACXC,QAAS,WAAQP,EAAMQ,YAAYR,EAAMS,Q,MCJ1CC,MAJf,SAAiBV,GACf,OAAO,0BAAMC,UAAU,WAAWD,EAAMW,W,MCiB3BC,MAhBf,SAAaZ,GACX,OACE,yBAAKC,UAAU,UACb,4BACE,wBAAIA,UAAU,SACZ,uBAAGY,KAAK,KAAR,gBAFJ,SAIUb,EAAMc,MAJhB,aAIiCd,EAAMe,SACrC,sCACUf,EAAMc,MADhB,iBACqCd,EAAMe,a,MCJpCC,MAPf,WACI,OACI,4BAAQf,UAAU,UACd,+DCiGGgB,E,YA5Fb,aAAe,IAAD,8BACZ,+CAcFC,YAAc,SAAAC,GAEZ,IADA,IAAIC,EAAID,EAAQE,OAAS,EAClBD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAQC,GACrBD,EAAQC,GAAKD,EAAQG,GACrBH,EAAQG,GAAKI,EACbN,IAEF,OAAOD,GAxBK,EA2BdX,YAAc,SAACC,GACb,IAAIkB,GAAmB,EACjBC,EAAU,EAAKC,MAAMV,QAAQW,KAAI,SAAAC,GACrC,IAAMC,EAAO,eAAQD,GAQrB,OAPIC,EAAQvB,KAAOA,IACjBwB,QAAQC,IAAIF,IACc,IAAtBA,EAAQG,YACVH,EAAQG,WAAY,EACpBR,GAAmB,IAGhBK,KAETL,EAAmB,EAAKS,mBAAmBR,GAAW,EAAKS,qBAAqBT,IAxCpE,EA2CdS,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CACZpB,QAAS,EAAKqB,UAAUF,GACxBxB,MAAO,KA9CG,EAkDdsB,mBAAqB,SAACE,GAAU,IAAD,EACD,EAAKT,MAAzBd,EADqB,EACrBA,SACF0B,EAFuB,EACX3B,MACO,EACnB4B,EAAcnB,KAAKoB,IAAIF,EAAU1B,GACvCkB,QAAQC,IAAI,UACZ,EAAKK,SAAS,CACZpB,QAAS,EAAKD,YAAYoB,GAC1BxB,MAAO2B,EACP1B,SAAU2B,KA1DA,EA6DdF,UAAY,SAACF,GACX,IAAME,EAAYF,EAAKR,KAAI,SAAAC,GAAI,sBAAUA,EAAV,CAAgBI,WAAW,OAC1D,OAAO,EAAKjB,YAAYsB,IA7DxB,EAAKX,MAAQ,CACXV,QAASA,EACTL,MAAO,EACPC,SAAU,GAEZ,EAAKP,YAAc,EAAKA,YAAYoC,KAAjB,gBACnB,EAAK1B,YAAc,EAAKA,YAAY0B,KAAjB,gBARP,E,iFAYZC,KAAKN,SAAS,CAAEpB,QAAS0B,KAAK3B,YAAY2B,KAAKhB,MAAMV,a,+BAsD7C,IAAD,OACD2B,EAAaD,KAAKhB,MAAMV,QAAQW,KACpC,SAACiB,GACC,OAAQ,kBAAC,EAAD,CACNC,IAAKD,EAAOtC,GACZA,GAAIsC,EAAOtC,GACXH,MAAOyC,EAAOzC,MACdE,YAAa,EAAKA,iBAKxB,OACE,6BACE,kBAAC,EAAD,CAAKM,MAAO+B,KAAKhB,MAAMf,MAAOC,SAAU8B,KAAKhB,MAAMd,WACnD,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG+B,Q,GApFOG,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b926fcd8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction FriendCard(props) {\n\n    return (\n            <img\n                className=\"click-item\"\n                aria-label=\"click item\"\n                alt={props.name}\n                src={props.image}\n                onClick={() => { props.handleClick(props.id) }}\n            />\n    )\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\">{props.children}</main>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Component for the Navbar\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">\r\n          <a href=\"/\">Clicky Game</a>\r\n        </li>\r\n         score={props.score} topScore={props.topScore}\r\n        <li>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(){\r\n    return(\r\n        <header className=\"header\">\r\n            <h1>Jumbotron header will be here</h1>\r\n        </header>\r\n    )\r\n}\r\nexport default Header ","import React from 'react';\nimport './App.css';\nimport friends from \"./friends.json\"\nimport FriendCard from './components/FriendCard/index.js';\nimport Wrapper from \"./components/Wrapper/index.js\";\nimport Nav from \"./components/Nav/index.js\"\nimport Header from \"./components/Header/index.js\"\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      friends: friends,\n      score: 0,\n      topScore: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.shuffleData = this.shuffleData.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ friends: this.shuffleData(this.state.friends) })\n  }\n\n  shuffleData = friends => {\n    let i = friends.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = friends[i];\n      friends[i] = friends[j];\n      friends[j] = temp;\n      i--\n    }\n    return friends\n  }\n\n  handleClick = (id) => {\n    let guessedCorrectly = false;\n    const newData = this.state.friends.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        console.log(newItem)\n        if (newItem.clickedOn === false) {\n          newItem.clickedOn = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem\n    })\n    guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n  }\n\n  handleIncorrectGuess = (data) => {\n    this.setState({\n      friends: this.resetGame(data),\n      score: 0\n    });\n  }\n\n  handleCorrectGuess = (data) => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n    console.log(\"nice, \")\n    this.setState({\n      friends: this.shuffleData(data),\n      score: newScore,\n      topScore: newTopScore\n    })\n  }\n  resetGame = (data) => {\n    const resetGame = data.map(item => ({ ...item, clickedOn: false }));\n    return this.shuffleData(resetGame);\n  }\n\n  render() {\n    const FriendInfo = this.state.friends.map(\n      (friend) => {\n        return (<FriendCard\n          key={friend.id}\n          id={friend.id}\n          image={friend.image}\n          handleClick={this.handleClick} \n          />)\n      }\n\n    )\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Wrapper>\n          {FriendInfo}\n\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}